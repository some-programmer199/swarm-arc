import jax
import jax.numpy as jnp
import flax.linen as nn
from flax.core import FrozenDict
from typing import Any

# ----------------------
# Genome Decoder
# ----------------------
class GenomeDecoder(nn.Module):
    hidden_size: int
    out_size: int  # total number of params in the mutator

    @nn.compact
    def __call__(self, genome: jnp.ndarray):
        x = nn.Dense(self.hidden_size)(genome)
        x = nn.relu(x)
        x = nn.Dense(self.hidden_size)(x)
        x = nn.relu(x)
        out = nn.Dense(self.out_size)(x)
        return out


# ----------------------
# Mutator Network (parameters generated by genome)
# ----------------------
class Mutator(nn.Module):
    input_dim: int
    hidden_dim: int
    output_dim: int

    def setup(self):
        # calculate total params for a 2-layer MLP
        self.num_params = (
            self.input_dim * self.hidden_dim + self.hidden_dim  # W1 + b1
            + self.hidden_dim * self.output_dim + self.output_dim  # W2 + b2
        )

    def decode_params(self, flat_params: jnp.ndarray):
        """Unflatten into (W1, b1, W2, b2)."""
        idx = 0
        W1 = flat_params[idx: idx + self.input_dim * self.hidden_dim].reshape(
            self.input_dim, self.hidden_dim
        )
        idx += self.input_dim * self.hidden_dim
        b1 = flat_params[idx: idx + self.hidden_dim]
        idx += self.hidden_dim
        W2 = flat_params[idx: idx + self.hidden_dim * self.output_dim].reshape(
            self.hidden_dim, self.output_dim
        )
        idx += self.hidden_dim * self.output_dim
        b2 = flat_params[idx: idx + self.output_dim]
        return W1, b1, W2, b2

    def __call__(self, x: jnp.ndarray, flat_params: jnp.ndarray):
        W1, b1, W2, b2 = self.decode_params(flat_params)
        h = jnp.tanh(x @ W1 + b1)
        out = h @ W2 + b2
        return out


# ----------------------
# Example usage
# ----------------------
def main():
    key = jax.random.PRNGKey(0)

    # genome setup
    genome_dim = 16
    hidden_size = 32

    # mutator setup
    input_dim, hidden_dim, output_dim = 10, 20, 5
    mutator = Mutator(input_dim, hidden_dim, output_dim)

    # genome decoder setup
    decoder = GenomeDecoder(hidden_size=hidden_size, out_size=mutator.num_params)

    # init params
    genome = jax.random.normal(key, (genome_dim,))
    decoder_params = decoder.init(key, genome)

    # get flat params from genome
    flat_params = decoder.apply(decoder_params, genome)

    # run mutator
    x = jax.random.normal(key, (1, input_dim))
    y = mutator(x, flat_params)

    print("Genome vector shape:", genome.shape)
    print("Flat params shape:", flat_params.shape)
    print("Input shape:", x.shape, "Output shape:", y.shape)


if __name__ == "__main__":
    main()
